name: CI

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master

jobs:
  prettier:
    name: Check format with prettier
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Export node version
      id: node_version
      run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: >-
        echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install dependencides
      run: >-
        yarn install
    - name: Run yarn pretty
      run: >-
        yarn pretty

  eslint:
    name: Lint with ESLint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Export node version
      id: node_version
      run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install dependencides
      run: >-
        yarn install
    - name: Lint using ESLint
      run: >-
        yarn lint

  test:
    name: Run unit tests using Vitest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Export node version
      id: node_version
      run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install dependencides
      run: >-
        yarn install
    - name: Run unit tests
      run: >-
        yarn test:unit

  cypress:
    name: Run Cypress tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Export node version
      id: node_version
      run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install dependencides
      run: >-
        yarn install
    - name: Cypress run
      uses: cypress-io/github-action@v4
      with:
        start: yarn start
        wait-on: http://localhost:3000/
        spec: "tests/e2e/**/*"
        config-file: cypress.config.js
        config: video=false
      env:
        CYPRESS_baseUrl: http://localhost:3000/
    # after the test run completes
    # store any screenshots
    # NOTE: screenshots will be generated only if E2E test failed
    # thus we store screenshots only on failures
    # Alternative: create and commit an empty cypress/screenshots folder
    # to always have something to upload
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: cypress-screenshots
        path: tests/e2e/screenshots
